
from rig.objects.base_object import BaseObject
from rig.objects.object_data import DagNodeData

class RigContrainer(BaseObject):

    def __init__(self, name: str) -> None: ...

    #... PUBLIC METHODS ...#
    def create(self) -> RigContrainer: ...
    
    @classmethod
    def from_data(cls, meta_node: str, data: dict): ...

    #... PRIVATE METHODS ...#
    def _initialize_modules(self) -> None: ...

    def _create_controls(self) -> None: ...

    def _set_type_meta(self, value) -> None: ...

    #... PROPERTIES ...#
    @property
    def type(self) -> str: ...

    @type.setter
    def type(self, value) -> None: ...

    @property
    def name(self) -> str: ...

    @name.setter
    def name(self, value) -> None: ...
    
    @property
    def top_node(self) -> DagNodeData: ...
    
    @top_node.setter
    def top_node(self, value) -> None: ...
    
    @property
    def geometry(self) -> DagNodeData: ...
    
    @geometry.setter
    def geometry(self, value) -> None: ...
    
    @property
    def controls(self) -> DagNodeData: ...
    
    @controls.setter
    def controls(self, value) -> None: ...
    
    @property
    def modules(self) -> DagNodeData: ...
    
    @modules.setter
    def modules(self, value) -> None: ...

class RigModule(BaseObject):

    def __del__(self) -> None: ...
    def __init__(self, name) -> None: ...
    def create(self): ...
    @property
    def name(self): ...
    @property
    def module(self): ...
    @module.setter
    def module(self, value) -> None: ...
    @property
    def systems(self): ...
    @systems.setter
    def systems(self, value) -> None: ...
    @property
    def constraints(self): ...
    @constraints.setter
    def constraints(self, value) -> None: ...
    @property
    def joints(self): ...
    @joints.setter
    def joints(self, value) -> None: ...
    @property
    def fk(self): ...
    @fk.setter
    def fk(self, value) -> None: ...
    @property
    def ik(self): ...
    @ik.setter
    def ik(self, value) -> None: ...
    @property
    def par_constraints(self): ...
    @par_constraints.setter
    def par_constraints(self, value) -> None: ...
    @property
    def point_constraints(self): ...
    @point_constraints.setter
    def point_constraints(self, value) -> None: ...
    @property
    def orient_constraints(self): ...
    @orient_constraints.setter
    def orient_constraints(self, value) -> None: ...
    @property
    def scale_constraints(self): ...
    @scale_constraints.setter
    def scale_constraints(self, value) -> None: ...
    def initialize_modules(self) -> None: ...
    def create_meta_data(self): ...
    @classmethod
    def from_data(cls, meta_node, data): ...
