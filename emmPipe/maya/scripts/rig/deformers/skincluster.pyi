
import maya.api.OpenMayaAnim as oma

from rig.objects.object_data import DagNodeData

class SkinclusterData(DagNodeData):

    def __init__(self, node: str, skincluster_node: str) -> None: ...
    
    #... Private Methods ...#
    def _get_skincluster(self) -> str: ...
    
    def _get_skincluster_fn(self) -> oma.MFnSkinCluster: ...

    def _get_influence_names(self) -> list: ...
    
    def _get_influence_indicies(self) -> list: ...
    
    def _get_weights(self) -> list: ...
    
    def _get_blend_weights(self) -> list: ...
    
    def _get_bind_pre_matrix_values(self) -> list: ...
    
    def _get_bind_pre_matrix_inputs(self) -> list: ...

    def _get_envelope(self) -> float: ...
    
    def _get_skinning_methods(self) -> int: ...
    
    def _get_use_components(self) -> int: ...
    
    def _get_normalize_weights(self) -> int: ...
    
    def _get_deform_user_normals(self) -> int: ...

    #... Properties ...#
    @property
    def skincluster(self) -> str: ...

    @property
    def skincluster_fn(self) -> oma.MFnSkinCluster: ...

    @property
    def influence_names(self) -> list: ...

    @property
    def influence_indices(self) -> list: ...

    @property
    def weights(self) -> list: ...

    @property
    def blend_weights(self) -> list: ...

    @property
    def bind_pre_matrix_values(self) -> list: ...

    @property
    def bind_pre_matrix_inputs(self) -> list: ...
    
    @property
    def envelope(self) -> float: ...
    
    @property
    def skinning_method(self) -> int: ...

    @property
    def use_components(self) -> int: ...

    @property
    def normalize_weights(self) -> int: ...

    @property
    def deform_user_normals(self) -> int: ...


def save_skincluster_data(node: str, path: str) -> None: ...

def load_skincluster_data(node: str, path: str) -> None: ...

def stack_skinclusters(source: str, target: str) -> None: ...

def copySkincluster(source: str, target: str) -> None: ...
