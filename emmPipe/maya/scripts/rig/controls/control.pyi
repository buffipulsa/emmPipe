
import maya.api.OpenMaya as om

from rig.objects.base_object import BaseObject
from rig.objects.object_data import DagNodeData, MetaNode, DependencyNodeData


class Control(BaseObject):

    def __init__(self, name: str, side: str, index: int, shape: int) -> None: ...

    #... Public methods ...#
    def create(self) -> object: ...

    def lock_transforms(self, node: DagNodeData, chs: str, axis: str, unlock: bool) -> None: ...

    @classmethod
    def from_data(cls, meta_node: DependencyNodeData, data: dict) -> object: ...
    
    #... Private methods ...#
    def _set_color(self, value: str) -> int: ...

    def _set_thickness(self, value: float) -> None: ...

    def _set_scale(self, value: float) -> None: ...

    def _create_meta_data(self) -> dict: ...

    #... Properties ...#
    @property
    def meta_node(self) -> DependencyNodeData: ...
    
    @meta_node.setter
    def meta_node(self, value: str) -> None: ...

    @property
    def control(self) -> DagNodeData: ...
    
    @control.setter
    def control(self, value: DagNodeData) -> None: ...

    @property
    def offset(self) -> DagNodeData: ...
    
    @offset.setter
    def offset(self, value: DagNodeData) -> None: ...

    @property
    def color(self) -> None: ...
    
    @color.setter
    def color(self, value: str) -> None: ...

    @property
    def thickness(self) -> None: ...
    
    @thickness.setter
    def thickness(self, value: float) -> None: ...
    
    @property
    def scale(self) -> None: ...
    
    @scale.setter
    def scale(self, value: float) -> None: ...


class ControlShapes:

    #... Public methods ...#
    @staticmethod
    def create_shape(name, positions: list, degree: int, close: bool) -> str: ...

    @classmethod
    def circle(cls, name: str) -> str: ...

    @classmethod
    def square(cls, name: str) -> str: ...

    @classmethod
    def arrowSquare(cls, name: str) -> str: ...

    @classmethod
    def box(cls, name: str) -> str: ...

    @classmethod
    def triangle(cls, name: str) -> str: ...

    @classmethod
    def cone(cls, name: str) -> str: ...

    @classmethod
    def orb(cls, name: str) -> str: ...

    @classmethod
    def diamond(cls, name: str) -> str: ...

    @classmethod
    def diamondCross(cls, name: str) -> str: ...

    @classmethod
    def arrow1way(cls, name: str) -> str: ...

    @classmethod
    def arrow4way(cls, name: str) -> str: ...

    @classmethod
    def arrow2way(cls, name: str) -> str: ...

