global proc shelf_emmPipe () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "print('emmRig shelf test')" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "emmRigTest" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "emmRig/emmRigTest.png" 
        -image1 "emmRig/emmRigTest.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from emmPipe.ui.main import main_ui\n\ntry:\n    mainUI.close() # pylint: disable=E0601\n    mainUI.deleteLater()\nexcept:\n    pass\n\nmainUI = main_ui.MainUI()\nmainUI.show(dockable=True)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Load or automatically load plug-ins" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Plug-in Manager" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PM" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "PluginManager" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Display and edit relationships among nodes of the scene" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Node Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "NodeEditor" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "NodeEditorWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# Any code required before unloading the plug-in (e.g. creating a new scene)\ncmds.file(new=True, force=True)\n\n# Reload the plugin\nfor plugin_name, node_name in zip(['rig_template.py', 'emm_locator.py'],\n                                  ['emmRigTemplate', 'emmlocator']):\n    #plugin_name = \"rig_template.py\" # Insert plugin python file name here\n    cmds.evalDeferred('if cmds.pluginInfo(\"{0}\", q=True, loaded=True): cmds.unloadPlugin(\"{0}\")'.format(plugin_name))\n    cmds.evalDeferred('if not cmds.pluginInfo(\"{0}\", q=True, loaded=True): cmds.loadPlugin(\"{0}\")'.format(plugin_name))\n    \n    \n    # Any setup code to help speed up testing (e.g. loading a test scene)\n    cmds.evalDeferred('cmds.createNode(\"{}\")'.format(node_name)) # Insert plugin name here" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "# Any code required before unloading the plug-in (e.g. creating ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "# Any code required before unloading the plug-in (e.g. creating a new scene)\ncmds.file(new=True, force=True)\n\n# Reload the plugin\nfor plugin_name, node_name in zip(['emm_locator.py'],\n                                  ['emmlocator']):\n    #plugin_name = \"rig_template.py\" # Insert plugin python file name here\n    cmds.evalDeferred('if cmds.pluginInfo(\"{0}\", q=True, loaded=True): cmds.unloadPlugin(\"{0}\")'.format(plugin_name))\n    cmds.evalDeferred('if not cmds.pluginInfo(\"{0}\", q=True, loaded=True): cmds.loadPlugin(\"{0}\")'.format(plugin_name))\n    \n    \n    # Any setup code to help speed up testing (e.g. loading a test scene)\n    cmds.evalDeferred('cmds.createNode(\"{}\")'.format(node_name)) # Insert plugin name here" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a locator object on the grid" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Locator" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "locator.png" 
        -image1 "locator.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "CreateLocator" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Match the translation of selected objects to the last-selected object." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Match Translation" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "MT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "MatchTranslation" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
